<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, September 14, 2016, 12:00 PM -->
<!-- MuClient version 5.01 -->
 
<!-- Plugin "Hadar_Double_Predictor" generated by Plugin Wizard -->
 
<muclient>
<plugin
   name="Hadar_Double_Predictor"
   author="Hadar"
   id="dbcf98147af347b80d74fc70"
   language="Lua"
   purpose="predict double via a command"
   date_written="2016-09-14 11:59:02"
   requires="4.00"
   version="3.1"
   >
<description trim="y">
<![CDATA[
Just use the command predict to take a guess at the next hour of double
]]>
</description>
 
</plugin>
 
<!--  Triggers  -->
 
<triggers>
  <trigger
   enabled="n"
   match="^Mob Deaths\s+:\s+([+-]?[0-9,]+)\s+([+-]?[0-9,]+)$"
   regexp="y"
   send_to="12"
   script="MobMath"
   group="doubletriggers"
   sequence="100"
  >
  <send></send>
  </trigger>
  <trigger
   enabled="n"
   match="^ \* The system time is\s+: (\d+):(\d+):(\d+) - \w+ (\d+) (\w+), (\d+)"
   regexp="y"
   send_to="12"
   script="LetItGo"
   group="doubletriggers"
   sequence="100"
  >
  <send></send>
  </trigger>
  <trigger
   enabled="n"
   match="^ \* Aardwolf last restarted on \: (\d+)\:(\d+)\:(\d+) \- \w+ (\d+) (\w+)\, (\d+)"
   regexp="y"
   send_to="12"
   script="GetTheDate"
   group="doubletriggers"
   sequence="100"
  >
  <send>
</send>
  </trigger>
</triggers>
 
<!--  Aliases  -->
 
<aliases>
  <alias
   match="predict *"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>HadarDouble={}
 
HadarDouble.Player='%1'
HadarDouble.VI="no"
EnableTriggerGroup("doubletriggers", true)
Send("gamestat 5")
Send("realtime")</send>
  </alias>
 
  <alias match="^(?:had|double) help$"
	enabled="y"
	sequence="100"
	send_to="12"
	regexp="y"
	keep_evaluating="y"
	>
	<send>
		HadarHelp()
	</send>
	</alias>
	<alias
   script="doubleSet"
   match="^setdouble$"
   enabled="y"
   regexp="y"
   sequence="100"
  >
  </alias>
</aliases>
 
 
<script>
<![CDATA[
require "serialize"
dofile(GetInfo(60) .. "aardwolf_colors.lua")

function hadarprint(str,level)

	if level == "debug" and expTracker["GL"].Debug == "yes" then
		AnsiNote(ColoursToANSI("@G[@YDEBUG@G]@W:@w"..str))
	elseif level == "error" then
        AnsiNote(ColoursToANSI("@R[@Mhgm @rERROR@R]@W:@w"..str))
     elseif level == "script" then
        AnsiNote(ColoursToANSI("@G[@CG@croup@CM@canager@G]@c"..str))
     elseif level == "helpfile" then
		AnsiNote(ColoursToANSI(str))
     else
		AnsiNote(ColoursToANSI(str))
	end
	
end 
 
function OnPluginSaveState ()
	SetVariable ("HadarDoubleString", serialize.save ("HadarDoubleString"))
	SetVariable ("doublePastFirstInstall", "true")
end -- function OnPluginSaveState
 
function interp(s, tab)
  return (s:gsub('($%b{})', function(w) return tab[w:sub(3, -2)] or w end))
end
 
function OnPluginInstall ()
   	if GetVariable ("enabled") == "false" then
		ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
		check (EnablePlugin(GetPluginID (), false))
		return
	end -- they didn't enable us last time
 
	OnPluginEnable ()
end
 
function OnPluginEnable ()
 
	HadarDouble = {}

	if aard_req_novisuals_mode == true then
        HDPVI = true
    else
        HDPVI = false
    end
 
	if GetVariable ("doublePastFirstInstall") == "true" then
		assert (loadstring (GetVariable ("HadarDoubleString") or "")) ()
	else
		buildInitial()
	end

	if HDPVI then
        hadarprint("Installing "..GetPluginName().." version "..GetPluginInfo (GetPluginID (), 19).."VI Enabled","script")
    else
        hadarprint("@YInstalling @c"..GetPluginName().."@Y version @c"..GetPluginInfo (GetPluginID (), 19).."@Y...","script")
    end
	hadarprint("had help (to see all of hadar's plugin helpfiles), or @Gdouble help@c to just see this one","script")
 
end
 
function buildInitial()
	HadarDoubleString = "@G\\}@R ${needed}@w Kills Left @G{/ @w(Avg @R${kpm} @wkpm) @G\\}@w Hour of Double in about: @R${day}@wd @R${hour}@wh @R${min}@wm @G{/@w"
	SaveState()
end
 
function doubleSet()
	HadarBackup = HadarDoubleString
	HadarDoubleString = utils.inputbox ("can accept up to  5 variables:\n${needed} - kills left\n${kpm} - avg kpm\n${day} - days\n${hour} - hours\n${min} - minutes", "Look of Double Predictor", HadarDoubleString, "Courier", 9)
	if HadarDoubleString ~= nil then
		SendNoEcho("echo double will look like: "..HadarDoubleString)
	else
		HadarDoubleString = HadarBackup
	end
	SaveState()
end
 
 
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
 
function timeDiff(t2,t1,script)
	local d1,d2,carry,diff = os.date('*t',t1),os.date('*t',t2),false,{}
	local colMax = {60,60,24,os.date('*t',os.time{year=d1.year,month=d1.month+1,day=0}).day,12}
	d2.hour = d2.hour - (d2.isdst and 1 or 0) + (d1.isdst and 1 or 0) -- handle dst
	for i,v in ipairs({'sec','min','hour','day','month','year'}) do
		diff[v] = d2[v] - d1[v] + (carry and -1 or 0)
		carry = diff[v] < 0
		if carry then diff[v] = diff[v] + colMax[i] end
	end
	for i,v in pairs(diff) do
		script[i] = v
	end
	return diff
end
 
function round(num, idp)
    local mult = 10^(idp or 0)
    if num >= 0 then return math.floor(num * mult + 0.5) / mult
    else return math.ceil(num * mult - 0.5) / mult end
end
 
function MobMath(name, line, wildcards)
	HadarDouble.KillsSinceReboot = string.gsub(wildcards[1],",","")
	HadarDouble.KillsSinceTracked = string.gsub(wildcards[2],",","")
	local number = HadarDouble.KillsSinceTracked/1000000
	local doubround = math.floor(number)
	HadarDouble.ThisMillion = doubround*1000000
	HadarDouble.NextMillion = HadarDouble.ThisMillion+1000000
	HadarDouble.KillsNeeded = HadarDouble.NextMillion-HadarDouble.KillsSinceTracked
	HadarDouble.KillsCompleted = HadarDouble.KillsSinceTracked-HadarDouble.ThisMillion
end
 
function GetTheDate(name, line, wildcards)
    local month_names = {Jan=1, Feb=2, Mar=3, Apr=4, May=5, Jun=6,
                         Jul=7, Aug=8, Sep=9, Oct=10, Nov=11, Dec=12}
    local month = month_names[wildcards[5]] or 1
 
    -- Store MUD reboot time
    HadarDouble.RebootTime = os.time{
        year = wildcards[6],
        month = month,
        day = wildcards[4],
        hour = wildcards[1],
        min = wildcards[2],
        sec = wildcards[3]
    }
 
    -- Optional: calculate TotalMin since reboot for fallback
    local current_time = os.time()
    HadarDouble.TotalMin = math.max((current_time - HadarDouble.RebootTime)/60, 1)
end
 
function LetItGo(name, line, wildcards)
    -- Parse current MUD time from trigger
    local month_names = {Jan=1, Feb=2, Mar=3, Apr=4, May=5, Jun=6,
                         Jul=7, Aug=8, Sep=9, Oct=10, Nov=11, Dec=12}
    local current_month = month_names[wildcards[5]] or 1
 
    local current_time = os.time{
        year = wildcards[6],
        month = current_month,
        day = wildcards[4],
        hour = wildcards[1],
        min = wildcards[2],
        sec = wildcards[3]
    }
 
    -- Ensure RebootTime exists
    if not HadarDouble.RebootTime then
        print("RebootTime not set. Wait for last-restarted trigger first.")
        return
    end
 
    -- Calculate minutes since reboot
    HadarDouble.TotalMin = math.max((current_time - HadarDouble.RebootTime)/60, 1)
 
    -- Store snapshot for last-hour kpm
    HadarDouble.KillSnapshots = HadarDouble.KillSnapshots or {}
    table.insert(HadarDouble.KillSnapshots, {
        time = current_time,
        kills = HadarDouble.KillsSinceReboot
    })
 
    -- Remove snapshots older than 1 hour
    local one_hour_ago = current_time - 3600
    while #HadarDouble.KillSnapshots > 0 and HadarDouble.KillSnapshots[1].time < one_hour_ago do
        table.remove(HadarDouble.KillSnapshots, 1)
    end
 
    -- Compute kpm
    local kpm
    if #HadarDouble.KillSnapshots >= 2 then
        local first_snapshot = HadarDouble.KillSnapshots[1]
        local last_snapshot  = HadarDouble.KillSnapshots[#HadarDouble.KillSnapshots]
        local minutes_elapsed = (last_snapshot.time - first_snapshot.time) / 60
        local kills_elapsed   = last_snapshot.kills - first_snapshot.kills
        if minutes_elapsed > 0 and kills_elapsed > 0 then
            kpm = kills_elapsed / minutes_elapsed
        else
            kpm = HadarDouble.KillsSinceReboot / HadarDouble.TotalMin
        end
    else
        kpm = HadarDouble.KillsSinceReboot / HadarDouble.TotalMin
    end
 
    -- Ensure kpm is valid
    if not kpm or kpm <= 0 then kpm = 1 end
    HadarDouble.MobsKilledPerMinute = kpm
 
    -- Compute minutes left until next million
    HadarDouble.MinutesLeft = HadarDouble.KillsNeeded / HadarDouble.MobsKilledPerMinute
 
    -- Convert to days/hours/minutes
    HadarDouble.DaysLeft = math.floor(HadarDouble.MinutesLeft / 1440)
    local leftoverMinutes = HadarDouble.MinutesLeft - (HadarDouble.DaysLeft * 1440)
    HadarDouble.HoursLeft = math.floor(leftoverMinutes / 60)
    HadarDouble.MinutesLeft = round(leftoverMinutes - (HadarDouble.HoursLeft * 60), 0)
 
    -- Format the output string with rounded kpm
    HadarDouble.Data = interp(HadarDoubleString, {
        needed = HadarDouble.KillsNeeded,
        kpm    = round(HadarDouble.MobsKilledPerMinute, 2),
        day    = HadarDouble.DaysLeft,
        hour   = HadarDouble.HoursLeft,
        min    = HadarDouble.MinutesLeft
    })
 
    -- Send the prediction
    SendSpecial(HadarDouble.Player.." "..HadarDouble.Data)
 
    -- Disable triggers after use
    EnableTriggerGroup("doubletriggers", false)
end
 
 
function HadarHelp()
	if HDPVI then
        hadarprint("Double Predictor Version:"..GetPluginInfo (GetPluginID (), 19))
        hadarprint("")
        hadarprint("predict <channel>: sends double prediction to a channel")
        hadarprint("setdouble: allows you to change the look of your output")
	else
        hadarprint("@x086+-----------------------@g[@CD@couble @CP@credictor @WV:"..GetPluginInfo (GetPluginID (), 19).."@g]@x086-----------------------+","helpfile")
        hadarprint("@x086| @x214double help             @x110- @x214Displays this helpfile @x086                    |","helpfile")
        hadarprint("@x086| @x208Predict <channel>       @x110- @x208Sends prediction to channel @x086               |","helpfile")
        hadarprint("@x086| @x214setdouble               @x110- @x214lets you change the output@x086                 |","helpfile")
        hadarprint("@x086+----------------------------------------------------------------------+","helpfile")
	end
end
 
 
]]>
</script> 
 
</muclient>